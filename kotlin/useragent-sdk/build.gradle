// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.3.50'
    ext.serialization_version = '0.12.0'
    ext.ktor_version = '1.2.4'
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.2.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}
plugins {
    id("org.jetbrains.kotlin.multiplatform") version '1.3.50'
    id("org.jetbrains.kotlin.plugin.serialization") version '1.3.50'
}
apply plugin: "com.android.library"
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

repositories {
    mavenCentral()
    google()
    jcenter()
    flatDir {
        dirs("lib")
    }
}
group 'com.microsoft.did.sdk'
version '0.0.1'
//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//    final def framework = kotlin.targets.ios.binaries.getFramework("UserAgentSdk", mode)
//
//    inputs.property "mode", mode
//    dependsOn framework.linkTask
//
//    from { framework.outputFile.parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//tasks.build.dependsOn packForXCode
android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
    }
    sourceSets {
        main {
            java.srcDir("src/androidMain/kotlin")
            manifest.srcFile("src/androidMain/AndroidManifest.xml")
            resources.srcDir("src/androidMain/resources")
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                api 'com.google.guava:guava:28.1-android'
                fileTree(dir: 'libs', include: ['*.jar'])
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1"
                implementation "io.ktor:ktor-client-android:$ktor_version"
            }
        }
        debug {
            jniLibs.srcDir("src/androidMain/resources/jni")
        }
        release {
            jniLibs.srcDir("src/androidMain/resources/jni")
        }
    }
    productFlavors {
    }
}
kotlin {
    android("android")
//    jvm()

//    KotlinNativeTarget iOSTarget(String name) {
//        if (System.getenv("SDK_NAME")?.startsWith("iphoneos") == true)
//            return iosArm64(name)
//        else
//            return iosArm64(name)
//    }
//
//    iOSTarget("ios") {
//        binaries {
//            framework {
////                baseName = "commonMain"
//            }
//        }
//    }
//    js {
//        browser {
//        }
//        nodejs {
//        }
//    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    // macosX64("macos")
    sourceSets {
        androidMain {}
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.0.1"
                implementation "io.ktor:ktor-client-json:$ktor_version"

            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
//        jvmMain {
//            dependencies {
//                implementation kotlin('stdlib-jdk8')
//                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
//                implementation("io.ktor:ktor-client-apache:$ktor_version")
//            }
//        }
//        jvmTest {
//            dependencies {
//                implementation kotlin('test')
//                implementation kotlin('test-junit')
//            }
//        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
                implementation "io.ktor:ktor-client-js:$ktor_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
//        macosMain {
//        }
//        macosTest {
//        }
//        iosMain {
//        }
//        iosTest {
//        }
    }
}
// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

dependencies {
    implementation files('lib/org.bitcoin.jar')
}