# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

name: build

pool:
  vmImage: 'macOS-10.14'

steps:
- task: Gradle@2
  displayName: 'gradlew build'

- bash: |
   #!/usr/bin/env bash
   
   # Install AVD files
   echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
   
   # Create emulator
   echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n xamarin_android_emulator -k 'system-images;android-27;google_apis;x86' --force
   
   $ANDROID_HOME/emulator/emulator -list-avds
   
   echo "Starting emulator"
   
   # Start emulator in background
   nohup $ANDROID_HOME/emulator/emulator -avd xamarin_android_emulator -no-snapshot > /dev/null 2>&1 &
   $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
   
   $ANDROID_HOME/platform-tools/adb devices
   
   echo "Emulator started"
  displayName: 'Starting emulator'

- task: Gradle@2
  displayName: 'gradlew -Pcoverage jacocoCoverageReport'
  inputs:
    tasks: '-Pcoverage jacocoCoverageReport'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: 'sdk/build/outputs/aar/'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage from $(System.DefaultWorkingDirectory)/sdk/build/reports/jacoco/jacocoCoverageReport/jacocoCoverageReport.xml'
  inputs:
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/sdk/build/reports/jacoco/jacocoCoverageReport/jacocoCoverageReport.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/sdk/build/reports/jacoco/jacocoCoverageReport/html'

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Artifacts'
  inputs:
    artifactName: drop
    downloadPath: '$(Build.ArtifactStagingDirectory)'

- task: ExtractFiles@1
  displayName: 'Extract files '
  inputs:
    archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/drop/SDK-debug.aar'
    destinationFolder: '$(Build.SourcesDirectory)/dropDebug'

- task: ExtractFiles@1
  displayName: 'Extract files '
  inputs:
    archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/drop/SDK-release.aar'
    destinationFolder: '$(Build.SourcesDirectory)/dropRelease'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: 'Run CredScan'
  inputs:
    toolMajorVersion: V2
    debugMode: false

- task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
  displayName: 'Run PoliCheck'
  inputs:
    targetType: F

- task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
  displayName: 'Run MpCmdRun.exe'
  inputs:
    EnableServices: true

- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  displayName: 'ESRP CodeSigning'
  enabled: false

- task: securedevelopmentteam.vss-secure-development-tools.build-task-msrd.MSRD@1
  displayName: 'Run Microsoft Security Risk Detection'
  enabled: false

- task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
  displayName: 'Create Security Analysis Report'
  inputs:
    AllTools: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
  displayName: 'Publish Security Analysis Logs'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
  displayName: 'TSA upload to Codebase:  Version: TsaV1'
  inputs:
    tsaStamp: Azure
  enabled: false

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    verbosity: Normal

