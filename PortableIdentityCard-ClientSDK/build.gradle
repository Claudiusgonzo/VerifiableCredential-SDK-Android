apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.4"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled (project.hasProperty('coverage'))
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        pickFirst("META-INF/*.kotlin_module")
    }

    sourceSets {
        main.jniLibs.srcDirs = ['libs']
    }

    compileOptions {
        sourceCompatibility '1.8'
        targetCompatibility '1.8'
    }

    testOptions {
        unitTestVariants.all {
            testDebugUnitTest.useJUnit()
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        // TODO: fix lint warnings
        abortOnError false
        warningsAsErrors false
    }
}

buildscript {
    ext.kotlin_version = '1.3.61'
    ext.serialization_version = '0.12.0'
    ext.ktor_version = '1.2.4'
    ext.security_version = '1.0.0-rc01'

    repositories {
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

dependencies {
    def dagger_version = 2.27
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    def room_version = "2.2.4"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    def retrofit2_version = "2.8.1"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit2_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"

    def okhttp3_version = "3.12.0"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    // KTX
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_ktx_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_ktx_version"
    implementation "androidx.room:room-ktx:$androidx_room_persistence_version"
    implementation "androidx.collection:collection-ktx:$collections_ktx_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"

    // Android
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'

    //other
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.0"
    implementation "androidx.security:security-crypto:$security_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"


    api 'com.google.guava:guava:28.1-android' // TODO: this seems to be required as api for org.bitcoin.jar? Can we avoid this?
    implementation files('libs/org.bitcoin.jar')

    // test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation "org.assertj:assertj-core:3.11.1"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation 'com.willowtreeapps.assertk:assertk-jvm:0.21'
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "junit:junit:4.13"
}

/**
 * Task that starts all test tasks and merges reports from them into one report.
 */
task jacocoCoverageReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport', 'test']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    final def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',
                            '**/*_MembersInjector.class', '**/Dagger*Component*.class', '**/Dagger*Subcomponent*.class',
                            '**/*Subcomponent$Builder.class', '**/*Module_*Factory.class']
    final def debugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    final def kotlinClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    final def mainSrc = "src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree, kotlinClasses])
    executionData = fileTree(dir: "$buildDir", includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/**/*coverage.ec'
    ])
}