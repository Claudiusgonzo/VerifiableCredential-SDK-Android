apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    ndkVersion ndk_version

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
                arg("room.incremental", "true")
            }
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled = project.hasProperty('coverage')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        pickFirst("META-INF/*.kotlin_module")
    }

    sourceSets {
        main.jniLibs.srcDirs = ['libs']
    }

    compileOptions {
        sourceCompatibility '1.8'
        targetCompatibility '1.8'
    }

    testOptions {
        unitTestVariants.all {
            testDebugUnitTest.useJUnit()
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"
    }

    lintOptions {
        abortOnError false
        warningsAsErrors false
        textReport true
        textOutput "stdout"
        explainIssues true
        showAll true
    }
}

buildscript {
    ext.kotlin_version = '1.3.61'

    repositories {
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

dependencies {

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "androidx.room:room-runtime:$androidx_room_persistence_version"
    implementation "androidx.room:room-ktx:$androidx_room_persistence_version"
    kapt "androidx.room:room-compiler:$androidx_room_persistence_version"
    testImplementation "androidx.room:room-testing:$androidx_room_persistence_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit2_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"

    implementation "com.squareup.okhttp3:okhttp:$com_squareup_okhttp3_okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$com_squareup_okhttp3_okhttp_version"

    def serialization_version = "0.12.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_ktx_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_ktx_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_ktx_version"

    // KTX
    implementation "androidx.collection:collection-ktx:1.1.0"
    implementation "androidx.core:core-ktx:1.3.0"

    //other
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.security:security-crypto:1.0.0-rc02"

    api 'com.google.guava:guava:28.1-android' // TODO: this seems to be required as api for org.bitcoin.jar? Can we avoid this?
    implementation files('libs/org.bitcoin.jar')
//    implementation "org.web3j:core:4.2.0-android"
//    implementation "org.bitcoinj:bitcoinj-core:0.12.3"
    implementation "com.madgag.spongycastle:prov:1.58.0.0"
    compile 'commons-codec:commons-codec:1.3'
    //Used for Json Canonicalization performed for ION
    implementation "io.github.erdtman:java-json-canonicalization:1.1"

    // test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation "org.assertj:assertj-core:3.11.1"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "io.mockk:mockk-android:1.10.0"
    androidTestImplementation "android.arch.core:core-testing:1.1.1"

    def mockito_version = "3.2.4"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "io.mockk:mockk:1.10.0"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation 'com.willowtreeapps.assertk:assertk-jvm:0.21'
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "junit:junit:4.13"
}

/**
 * Task that starts all test tasks and merges reports from them into one report.
 */
task jacocoCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    final def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',
                            '**/*_MembersInjector.class', '**/Dagger*Component*.class', '**/Dagger*Subcomponent*.class',
                            '**/*Subcomponent$Builder.class', '**/*Module_*Factory.class']
    final def debugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    final def kotlinClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    final def mainSrc = "$buildDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree, kotlinClasses]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            '**/*.exec', '**/*.ec'
    ]))
}